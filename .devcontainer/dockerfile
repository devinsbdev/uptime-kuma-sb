# ############################################
# # Build in Golang
# # Run npm run build-healthcheck-armv7 in the host first, another it will be super slow where it is building the armv7 healthcheck
# ############################################
# FROM golang:1.19.4-buster AS build_healthcheck
# WORKDIR /app
# ARG TARGETPLATFORM
# COPY ./extra/ ./extra/

# # Compile healthcheck.go
# RUN apt update
# RUN apt --yes --no-install-recommends install curl
# RUN curl -sL https://deb.nodesource.com/setup_18.x | bash
# RUN apt --yes --no-install-recommends install nodejs
# RUN node -v
# RUN node ./extra/build-healthcheck.js $TARGETPLATFORM

# ############################################
# # Build in Node.js
# ############################################
# FROM louislam/uptime-kuma:base-debian AS build
# WORKDIR /app

# ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1
# COPY . .
# COPY --from=build_healthcheck /app/extra/healthcheck /app/extra/healthcheck
# RUN npm ci --production && \
#     chmod +x /app/extra/entrypoint.sh

# ############################################
# # ⭐ Main Image
# ############################################
# FROM louislam/uptime-kuma:base-debian AS release
# WORKDIR /app

# # Copy app files from build layer
# COPY --from=build /app /app

# EXPOSE 3001
# VOLUME ["/app/data"]
# HEALTHCHECK --interval=60s --timeout=30s --start-period=180s --retries=5 CMD extra/healthcheck
# ENTRYPOINT ["/usr/bin/dumb-init", "--", "extra/entrypoint.sh"]
# CMD ["tail", "-f", "/dev/null"]
# # CMD ["node", "server/server.js"]

# ############################################
# # Mark as Nightly
# ############################################
# FROM release AS nightly
# RUN npm run mark-as-nightly

# ############################################
# # Build an image for testing pr
# ############################################
# # FROM louislam/uptime-kuma:base-debian AS pr-test

# # WORKDIR /app

# # ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=1

# # ## Install Git
# # RUN apt update \
# #     && apt --yes --no-install-recommends install curl \
# #     && curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
# #     && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
# #     && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
# #     && apt update \
# #     && apt --yes --no-install-recommends  install git

# # ## Empty the directory, because we have to clone the Git repo.
# # RUN rm -rf ./* && chown node /app

# # USER node
# # RUN git config --global user.email "no-reply@no-reply.com"
# # RUN git config --global user.name "PR Tester"
# # RUN git clone https://github.com/louislam/uptime-kuma.git .
# # RUN npm ci

# # EXPOSE 3000 3001
# # VOLUME ["/app/data"]
# # HEALTHCHECK --interval=60s --timeout=30s --start-period=180s --retries=5 CMD node extra/healthcheck.js
# # CMD ["npm", "run", "start-pr-test"]

# -- DEV DOCKERFILE --
# -- DO NOT USE IN PRODUCTION! --

FROM node:16
LABEL maintainer "uptime-kuma-sb"

RUN apt-get update && \
    apt-get install -y bash curl git python make g++ nano openssh-server gnupg nodejs

WORKDIR /app
COPY .. /app/
ENV dockerdev 1
# ENV DEVDB postgres

# EXPOSE 3001
# VOLUME ["/app/data"]
# ENTRYPOINT ["/usr/bin/dumb-init", "--", "extra/entrypoint.sh"]
# CMD ["tail", "-f", "/dev/null"]
